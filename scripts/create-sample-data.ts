import 'dotenv/config';
import { query } from '../src/integrations/postgres';

interface User {
  id: string;
  email: string;
}

async function createSampleData() {
  console.log('Creating sample data for GCP Cloud SQL...');
  
  try {
    // „Çµ„É≥„Éó„É´„É¶„Éº„Ç∂„Éº„Çí‰ΩúÊàê
    const users = [
      { email: 'john.doe@example.com' },
      { email: 'jane.smith@example.com' },
      { email: 'mike.johnson@example.com' },
      { email: 'sarah.wilson@example.com' },
      { email: 'david.brown@example.com' }
    ];

    const createdUsers: User[] = [];
    for (const user of users) {
      const result = await query(`
        INSERT INTO users (email) VALUES ($1) 
        ON CONFLICT (email) DO UPDATE SET updated_at = NOW()
        RETURNING id, email
      `, [user.email]);
      createdUsers.push(result.rows[0] as User);
      console.log(`Created user: ${user.email}`);
    }

    // „Çµ„É≥„Éó„É´Ê±ÇËÅ∑ËÄÖ„Éó„É≠„Éï„Ç£„Éº„É´„Çí‰ΩúÊàê
    const jobSeekers = [
      {
        user_id: createdUsers[0].id,
        full_name: 'John Doe',
        date_of_birth: '1990-05-15',
        gender: 'male' as const,
        email: 'john.doe@example.com',
        phone: '+81-90-1234-5678',
        address: 'Êù±‰∫¨ÈÉΩÊ∏ãË∞∑Âå∫1-1-1',
        desired_job_title: '„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Ç®„É≥„Ç∏„Éã„Ç¢',
        experience_years: 5,
        skills: ['React', 'TypeScript', 'Node.js', 'PostgreSQL'],
        self_introduction: '5Âπ¥Èñì„ÅÆ„Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÈñãÁô∫ÁµåÈ®ì„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇReact„Å®TypeScript„Çí‰∏≠ÂøÉ„Å´„ÄÅ„É¶„Éº„Ç∂„Éº„Éï„É¨„É≥„Éâ„É™„Éº„Å™Web„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆÈñãÁô∫„Å´Êê∫„Çè„Å£„Å¶„Åç„Åæ„Åó„Åü„ÄÇ'
      },
      {
        user_id: createdUsers[1].id,
        full_name: 'Jane Smith',
        date_of_birth: '1988-12-03',
        gender: 'female' as const,
        email: 'jane.smith@example.com',
        phone: '+81-80-9876-5432',
        address: 'Â§ßÈò™Â∫úÂ§ßÈò™Â∏Ç2-2-2',
        desired_job_title: 'UI/UX„Éá„Ç∂„Ç§„Éä„Éº',
        experience_years: 7,
        skills: ['Figma', 'Adobe Creative Suite', 'Sketch', 'Prototyping'],
        self_introduction: '7Âπ¥Èñì„ÅÆ„Éá„Ç∂„Ç§„É≥ÁµåÈ®ì„Åå„ÅÇ„Çä„ÄÅ„É¶„Éº„Ç∂„Éº‰∏≠ÂøÉ„ÅÆ„Éá„Ç∂„Ç§„É≥ÊÄùËÄÉ„ÇíÂ§ßÂàá„Å´„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇFigma„Çí‰Ωø„Å£„Åü„Éó„É≠„Éà„Çø„Ç§„Éî„É≥„Ç∞„ÅåÂæóÊÑè„Åß„Åô„ÄÇ'
      },
      {
        user_id: createdUsers[2].id,
        full_name: 'Mike Johnson',
        date_of_birth: '1992-08-20',
        gender: 'male' as const,
        email: 'mike.johnson@example.com',
        phone: '+81-70-5555-1234',
        address: 'Á•ûÂ•àÂ∑ùÁúåÊ®™ÊµúÂ∏Ç3-3-3',
        desired_job_title: '„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„Ç®„É≥„Ç∏„Éã„Ç¢',
        experience_years: 4,
        skills: ['Python', 'Django', 'PostgreSQL', 'AWS'],
        self_introduction: 'Python„Å®Django„Çí‰Ωø„Å£„Åü„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâÈñãÁô∫„ÅåÂ∞ÇÈñÄ„Åß„Åô„ÄÇ„Çπ„Ç±„Éº„É©„Éñ„É´„Å™„Ç∑„Çπ„ÉÜ„É†Ë®≠Ë®à„Å´ËààÂë≥„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ'
      },
      {
        user_id: createdUsers[3].id,
        full_name: 'Sarah Wilson',
        date_of_birth: '1995-03-10',
        gender: 'female' as const,
        email: 'sarah.wilson@example.com',
        phone: '+81-60-7777-8888',
        address: 'ÊÑõÁü•ÁúåÂêçÂè§Â±ãÂ∏Ç4-4-4',
        desired_job_title: '„Éá„Éº„Çø„Çµ„Ç§„Ç®„É≥„ÉÜ„Ç£„Çπ„Éà',
        experience_years: 3,
        skills: ['Python', 'R', 'SQL', 'Machine Learning'],
        self_introduction: '„Éá„Éº„ÇøÂàÜÊûê„Å®Ê©üÊ¢∞Â≠¶Áøí„ÅåÂ∞ÇÈñÄ„Åß„Åô„ÄÇ„Éì„Ç∏„Éç„ÇπË™≤È°å„Çí„Éá„Éº„Çø„Éâ„É™„Éñ„É≥„Å´Ëß£Ê±∫„Åô„Çã„Åì„Å®„Å´ÊÉÖÁÜ±„ÇíÊåÅ„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ'
      },
      {
        user_id: createdUsers[4].id,
        full_name: 'David Brown',
        date_of_birth: '1985-11-25',
        gender: 'male' as const,
        email: 'david.brown@example.com',
        phone: '+81-50-9999-0000',
        address: 'Á¶èÂ≤°ÁúåÁ¶èÂ≤°Â∏Ç5-5-5',
        desired_job_title: '„Éó„É≠„ÉÄ„ÇØ„Éà„Éû„Éç„Éº„Ç∏„É£„Éº',
        experience_years: 8,
        skills: ['Product Strategy', 'Agile', 'User Research', 'Analytics'],
        self_introduction: '8Âπ¥Èñì„ÅÆ„Éó„É≠„ÉÄ„ÇØ„Éà„Éû„Éç„Ç∏„É°„É≥„ÉàÁµåÈ®ì„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ„É¶„Éº„Ç∂„Éº‰æ°ÂÄ§„ÅÆÊúÄÂ§ßÂåñ„Å®„Éì„Ç∏„Éç„ÇπÊàêÈï∑„ÅÆ‰∏°Á´ã„ÇíÁõÆÊåá„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ'
      }
    ];

    for (const jobSeeker of jobSeekers) {
      await query(`
        INSERT INTO job_seekers (
          user_id, full_name, date_of_birth, gender, email, phone, address,
          desired_job_title, experience_years, skills, self_introduction
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
        ON CONFLICT (user_id) DO UPDATE SET
          full_name = EXCLUDED.full_name,
          date_of_birth = EXCLUDED.date_of_birth,
          gender = EXCLUDED.gender,
          email = EXCLUDED.email,
          phone = EXCLUDED.phone,
          address = EXCLUDED.address,
          desired_job_title = EXCLUDED.desired_job_title,
          experience_years = EXCLUDED.experience_years,
          skills = EXCLUDED.skills,
          self_introduction = EXCLUDED.self_introduction
      `, [
        jobSeeker.user_id, jobSeeker.full_name, jobSeeker.date_of_birth, jobSeeker.gender,
        jobSeeker.email, jobSeeker.phone, jobSeeker.address, jobSeeker.desired_job_title,
        jobSeeker.experience_years, jobSeeker.skills, jobSeeker.self_introduction
      ]);
      console.log(`Created job seeker profile: ${jobSeeker.full_name}`);
    }

    // „Éá„Éº„ÇøÁ¢∫Ë™ç
    const userCount = await query('SELECT COUNT(*) as count FROM users');
    const jobSeekerCount = await query('SELECT COUNT(*) as count FROM job_seekers');
    
    console.log('\n‚úÖ Sample data created successfully!');
    console.log(`Users: ${userCount.rows[0].count}`);
    console.log(`Job Seekers: ${jobSeekerCount.rows[0].count}`);
    
    // „Çµ„É≥„Éó„É´„Éá„Éº„Çø„ÅÆË°®Á§∫
    const allJobSeekers = await query(`
      SELECT js.*, u.email as user_email 
      FROM job_seekers js 
      JOIN users u ON js.user_id = u.id 
      ORDER BY js.created_at DESC
    `);
    
    console.log('\nüìã Sample Job Seekers:');
    allJobSeekers.rows.forEach((seeker: any, index: number) => {
      console.log(`${index + 1}. ${seeker.full_name} - ${seeker.desired_job_title} (${seeker.experience_years}Âπ¥ÁµåÈ®ì)`);
    });

  } catch (error) {
    console.error('‚ùå Error creating sample data:', error);
    process.exit(1);
  }
}

createSampleData(); 